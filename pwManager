#!/usr/bin/env python3

import argh

from argh import arg
from QingQiz import utils, cipher, log


class Config():
    def __init__(self, path):
        self._path = path
        self._content = None
        self._key = None

    @property
    def key(self):
        if self._key is None:
            self._key, res = utils.auth()
            assert res, 'Authentication Error'
        return self._key

    @property
    def pwl(self):
        if self._content is None:
            self._content = cipher.JSON.load(self._path, self.key)
            self._content = self._content if self._content else {}
        return self._content

    def find(self, site, username):
        import re

        for i in self.pwl:
            if re.search(site, i) is None:
                continue
            for u in self.pwl[i]:
                if username is None or username in u:
                    yield i, u, self.pwl[i][u]

    def save(self):
        if self._content is None:
            self.pwl
        cipher.JSON.dump(self._content, self._path, self._key)


@arg('name', help='password namespace, example: github.com')
@arg('-u', '--username', help='username')
@arg('--raw', default=False, help='raw output (csv)')
def get(name, **kwargs):
    """get a password from pwManager"""
    res = [i for i in config.find(name, kwargs['username'])]

    if len(res) > 5:
        log.e('too many results')

    if kwargs['raw']:
        print('namespace,name,password')
        for i in res:
            print(i[0], i[1], cipher.decrypt(config.key, i[2]), sep=',')
    else:
        from rich import box
        from rich.table import Table
        from rich.console import Console

        console = Console()

        table = Table(show_header=True, header_style='bold')
        table.add_column('Namespace')
        table.add_column('Username')
        table.add_column('Password')

        for i in res:
            table.add_row(i[0], i[1], cipher.decrypt(config.key, i[2]))

        table.columns[0].style = "cyan"
        table.columns[0].header_style = "bold cyan"
        table.columns[1].style = "blue"
        table.columns[1].header_style = "bold blue"
        table.columns[2].style = "red"
        table.columns[2].header_style = "bold red"
        table.row_styles = ['none', 'dim']
        table.border_style = 'bright_yellow'
        table.box = box.SIMPLE
        console.clear()
        console.print()
        console.print(table)

        try:
            input('\nEnter to return...')
        finally:
            import os
            os.system('reset')


@arg('name', help='namespace')
@arg('-u', '--username', required=True, help='username')
@arg('-p', '--password', default='-', help='password, read from stdin when set to `-`')
def insert(name, **kwargs):
    """insert a password into pwManager"""
    if config.pwl.get(name) is None:
        config.pwl[name] = {}

    if kwargs['password'] == '-':
        try:
            a = utils.getpass('Password: ')
            b = utils.getpass('Password again: ')
        except (KeyboardInterrupt, EOFError):
            print()
            log.e('Abort')

        if a != b:
            log.e('password not match')

        kwargs['password'] = a

    config.pwl[name][kwargs['username']] = cipher.encrypt(
            config.key, kwargs['password'])
    config.save()


@arg('name', help='namespace')
@arg('-u', '--username', required=True, help='username')
def generate(name, **kwargs):
    """generate a password"""
    import string
    import random

    cho = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choices(cho, k=16))
    print('Generated Password:', password)

    try:
        a = input('\nAccept (Y/n): ').strip().lower()
    except (KeyboardInterrupt, EOFError):
        print()
        log.e('Abort')
    if not a or a != 'n':
        insert(name, username=kwargs['username'], password=password)
    else:
        log.e('Abort')


@arg('name', help='namespace')
@arg('-u', '--username', required=True, help='username')
def delete(name, **kwargs):
    """delete a password"""
    res = [i for i in config.find(name, kwargs['username'])]

    if len(res) > 1:
        log.e('more than one')
    if len(res) == 0:
        log.e('not found')

    del config.pwl[name][kwargs['username']]

    if config.pwl[name] == {}:
        del config.pwl[name]

    config.save()


@arg('-f', '--file', help='choose a file', required=True)
@arg('-t', '--type', choices=['chrome', 'firefox'], default='chrome', help='password file type')
def update(**kwargs):
    """update pwManager from a file"""
    if kwargs['type'] == 'chrome':
        lines = open(kwargs['file']).read().strip().split('\n')[1:]

        for line in lines:
            line = line.split(',')

            name = line[1]
            username = line[2]
            password = ','.join(line[3:])

            log.i('importing ' + name)
            insert(name, username=username, password=password)
    elif kwargs['type'] == 'firefox':
        import re

        lines = open(kwargs['file']).read().strip().split('\n')[1:]

        for line in lines:
            line = re.findall(r'(?<=,)"(.*?)(?<!")"(?=,)', line)

            name = line[2].replace('""', '"')
            username = line[0].replace('""', '"')
            password = line[1].replace('""', '"')

            log.i('importing ' + name)
            insert(name, username=username, password=password)
    else:
        log.e('unsupported config type')


if __name__ == '__main__':
    config = Config('~/.local/share/getpw.json')

    parser = argh.ArghParser()
    parser.add_commands([get, insert, generate, delete, update])
    parser.dispatch()
